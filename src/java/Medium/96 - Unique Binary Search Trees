// first attempt

class Solution {

    HashMap<Integer, Integer> nToNum = new HashMap<>();

    public int numTrees(int n) {
        if (n < 2) {
            return 1;
        }
        else if (nToNum.containsKey(n)) {
            return nToNum.get(n);
        }
        else {
            int sum = 0;
            for (int i = 1; i <= n; i++) {
                sum += (numTrees(i - 1) * numTrees(n - i));
            }
            nToNum.put(n, sum);
            return sum;
        }
    }

}

// second attempt

class Solution {

    public int numTrees(int n) {
        int[] trees = new int[n + 1];
        trees[0] = 1;
        trees[1] = 1;
        for (int i = 2; i <= n; i++) {
            int sum = 0;
            for (int j = 1; j <= i; j++) {
                sum += (trees[j - 1] * trees[i - j]);
            }
            trees[i] = sum;
        }
        return trees[n];
    }

}