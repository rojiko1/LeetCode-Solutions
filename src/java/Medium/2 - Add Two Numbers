// first solution

import java.math.BigInteger;

class Solution {

    public java.Workspace.ListNode addTwoNumbers(java.Workspace.ListNode l1, java.Workspace.ListNode l2) {
        BigInteger ten = new BigInteger("10");
        int pow = 0;
        BigInteger i1 = new BigInteger("0");
        BigInteger i2 = new BigInteger("0");
        java.Workspace.ListNode current = l1;
        while (current != null) {
            i1 = i1.add(BigInteger.valueOf(current.val).multiply(ten.pow(pow)));
            current = current.next;
            pow++;
        }
        pow = 0;
        current = l2;
        while (current != null) {
            i2 = i2.add(BigInteger.valueOf(current.val).multiply(ten.pow(pow)));;
            current = current.next;
            pow++;
        }
        BigInteger answer = i1.add(i2);
        BigInteger mod_of_answer;
        mod_of_answer = answer.mod(ten);
        current = new java.Workspace.ListNode(mod_of_answer.intValue());
        java.Workspace.ListNode head = current;
        answer = answer.subtract(mod_of_answer);
        answer = answer.divide(ten);
        while (!answer.equals(BigInteger.valueOf(0))) {
            mod_of_answer = answer.mod(ten);
            current.next = new java.Workspace.ListNode(mod_of_answer.intValue());
            current = current.next;
            answer = answer.subtract(mod_of_answer);
            answer = answer.divide(ten);
        }
        return head;
    }

}

// second solution

class Solution {

    public java.Workspace.ListNode addTwoNumbers(java.Workspace.ListNode l1, java.Workspace.ListNode l2) {
        java.Workspace.ListNode head = new java.Workspace.ListNode();
        java.Workspace.ListNode current = head;
        java.Workspace.ListNode l1current = l1;
        java.Workspace.ListNode l2current = l2;
        int carryOver = 0;
        while ((l1current != null) && (l2current != null)) {
            current.next = new java.Workspace.ListNode((l1current.val + l2current.val + carryOver) % 10);
            current = current.next;
            if (l1current.val + l2current.val + carryOver >= 10) {
                carryOver = 1;
            }
            else {carryOver = 0;}
            l1current = l1current.next;
            l2current = l2current.next;
        }
        if (l1current != null) {
            while (l1current != null) {
                current.next = new java.Workspace.ListNode((l1current.val + carryOver) % 10);
                current = current.next;
                if (l1current.val + carryOver >= 10) {
                    carryOver = 1;
                }
                else {carryOver = 0;}
                l1current = l1current.next;
            }
        }
        else if (l2current != null) {
            while (l2current != null) {
                current.next = new java.Workspace.ListNode((l2current.val + carryOver) % 10);
                current = current.next;
                if (l2current.val + carryOver >= 10) {
                    carryOver = 1;
                }
                else {carryOver = 0;}
                l2current = l2current.next;
            }
        }
        if (carryOver == 1) {current.next = new java.Workspace.ListNode(1);}
        head = head.next;
        return head;
    }

}