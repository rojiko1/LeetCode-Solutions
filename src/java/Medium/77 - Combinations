// first attempt

class Solution {

    public List<List<Integer>> combine(int n, int k) {
        return recur(1, n, k);
    }

    private List<List<Integer>> recur(int start, int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        if (k == 1) {
            for (int i = start; i <= n; i++) {
                ArrayList<Integer> elements = new ArrayList<>();
                elements.add(i);
                res.add(elements);
            }
            return res;
        }
        for (int i = start; i <= n - k + 1; i++) {
            List<List<Integer>> combs = recur(i + 1, n, k - 1);
            for (List<Integer> comb : combs) {
                comb.add(0, i);
                res.add(comb);
            }
        }
        return res;
    }

}

// second attempt

class Solution {

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        recur(1, n, k, new ArrayList<>(), res);
        return res;
    }

    private void recur(int start, int n, int k, ArrayList<Integer> comb, List<List<Integer>> res) {
        if (comb.size() == k) {
            res.add(new ArrayList<>(comb));
        }
        else {
            for (int i = start; i <= n; i++) {
                comb.add(i);
                recur(i + 1, n, k, comb, res);
                comb.remove(comb.size() - 1);
            }
        }
    }

}