class Solution {

    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true;
        }
        else {
            int leftChildDepth = subTreeIsBalanced(root.left);
            int rightChildDepth = subTreeIsBalanced(root.right);
            if ((leftChildDepth == -1) || (rightChildDepth == -1)) {
                return false;
            }
            else if (Math.abs(leftChildDepth - rightChildDepth) > 1) {
                return false;
            }
            else {
                return true;
            }
        }
    }

    private int subTreeIsBalanced(TreeNode root) {
        if (root == null) {
            return 0;
        }
        else {
            int leftChildDepth = subTreeIsBalanced(root.left);
            int rightChildDepth = subTreeIsBalanced(root.right);
            if ((leftChildDepth == -1) || (rightChildDepth == -1)) {
                return -1;
            }
            else if (Math.abs(leftChildDepth - rightChildDepth) > 1) {
                return -1;
            }
            else {
                return Math.max(leftChildDepth, rightChildDepth) + 1;
            }
        }
    }

}