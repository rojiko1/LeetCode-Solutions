class Solution {

    public int[][] insert(int[][] intervals, int[] newInterval) {
        if (intervals.length == 0) {
            return new int[][]{newInterval};
        }
        int[] mergedInterval = newInterval;
        boolean merged = false;
        int i = 0;
        int size = intervals.length + 1;
        while (!merged && (i < intervals.length)) {
            if ((intervals[i][1] >= mergedInterval[0]) && (intervals[i][0] <= mergedInterval[1])) {
                mergedInterval[0] = Math.min(mergedInterval[0], intervals[i][0]);
                mergedInterval[1] = Math.max(mergedInterval[1], intervals[i][1]);
                size--;
            }
            else if (size < (intervals.length + 1)) {
                merged = true;
            }
            i++;
        }
        int[][] result = new int[size][2];
        int ptr = 0;
        merged = false;
        i = 0;
        while (i < size) {
            if (ptr == intervals.length) {
                result[i] = mergedInterval;
                merged = true;
                i++;
            }
            else if (intervals[ptr][0] < mergedInterval[0]) {
                result[i] = intervals[ptr];
                ptr++;
                i++;
            }
            else if (!merged) {
                result[i] = mergedInterval;
                merged = true;
                i++;
            }
            else if (intervals[ptr][1] > mergedInterval[1]) {
                result[i] = intervals[ptr];
                ptr++;
                i++;
            }
            else {
                ptr++;
            }
        }
        return result;
    }

}