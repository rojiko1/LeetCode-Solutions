// first solution using Dijkstra's algorithm

class Solution {

    private class Pair implements Comparable<Pair> {
        public int priority;
        public int val;

        public Pair(int priority, int val) {
            this.priority = priority;
            this.val = val;
        }

        public int compareTo(Pair p) {
            return this.priority - p.priority;
        }
    }

    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] distances = new int[m][n];
        Pair[][] pairs = new Pair[m][n];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        distances[0][0] = grid[0][0];
        pq.add(new Pair(distances[0][0], 0));
        while (pq.size() > 0) {
            Pair curr = pq.poll();
            int[] coords = numToCoord(curr.val, n);
            if (inBounds(coords[0] + 1, coords[1], m, n)) {
                if ((distances[coords[0] + 1][coords[1]] == 0) ||
                (distances[coords[0] + 1][coords[1]] > (distances[coords[0]][coords[1]] + grid[coords[0] + 1][coords[1]]))) {
                    distances[coords[0] + 1][coords[1]] = distances[coords[0]][coords[1]] + grid[coords[0] + 1][coords[1]];
                    if (pairs[coords[0] + 1][coords[1]] != null) {
                        pq.remove(pairs[coords[0] + 1][coords[1]]);
                        pairs[coords[0] + 1][coords[1]].priority = distances[coords[0] + 1][coords[1]];
                        pq.add(pairs[coords[0] + 1][coords[1]]);
                    }
                    else {
                        pairs[coords[0] + 1][coords[1]] = new Pair(distances[coords[0] + 1][coords[1]], coordToNum(coords[0] + 1, coords[1], n));
                        pq.add(pairs[coords[0] + 1][coords[1]]);
                    }
                }
            }
            if (inBounds(coords[0], coords[1] + 1, m, n)) {
                if ((distances[coords[0]][coords[1] + 1] == 0) ||
                (distances[coords[0]][coords[1] + 1] > (distances[coords[0]][coords[1]] + grid[coords[0]][coords[1] + 1]))) {
                    distances[coords[0]][coords[1] + 1] = distances[coords[0]][coords[1]] + grid[coords[0]][coords[1] + 1];
                    if (pairs[coords[0]][coords[1] + 1] != null) {
                        pq.remove(pairs[coords[0]][coords[1] + 1]);
                        pairs[coords[0]][coords[1] + 1].priority = distances[coords[0]][coords[1] + 1];
                        pq.add(pairs[coords[0]][coords[1] + 1]);
                    }
                    else {
                        pairs[coords[0]][coords[1] + 1] = new Pair(distances[coords[0]][coords[1] + 1], coordToNum(coords[0], coords[1] + 1, n));
                        pq.add(pairs[coords[0]][coords[1] + 1]);
                    }
                }
            }
        }
        return distances[m - 1][n - 1];
    }

    private int coordToNum(int r, int c, int n) {
        return (r * n) + c;
    }

    private int[] numToCoord(int num, int n) {
        return new int[]{num / n, num % n};
    }

    private boolean inBounds(int r, int c, int m, int n) {
        return (r < m) && (c < n);
    }

}

// second solution modifying array

class Solution {

    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for (int i = 1; i < m; i++) {
            grid[i][0] += grid[i - 1][0];
        }
        for (int i = 1; i < n; i++) {
            grid[0][i] += grid[0][i - 1];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
            }
        }
        return grid[m - 1][n - 1];
    }

}