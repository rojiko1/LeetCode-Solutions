class Solution {

    public List<TreeNode> generateTrees(int n) {
        return generateTrees(1, n);
    }

    private List<TreeNode> generateTrees(int firstNum, int n) {
        List<TreeNode> result = new ArrayList<TreeNode>();
        for (int i = firstNum; i < firstNum + n; i++) {
            List<TreeNode> leftTrees = generateTrees(firstNum, i - firstNum);
            List<TreeNode> rightTrees = generateTrees(i + 1, n - (i - firstNum + 1));
            if (leftTrees.size() == 0) {
                leftTrees.add(null);
            }
            if (rightTrees.size() == 0) {
                rightTrees.add(null);
            }
            for (int j = 0; j < leftTrees.size(); j++) {
                for (int k = 0; k < rightTrees.size(); k++) {
                    result.add(new TreeNode(i, leftTrees.get(j), rightTrees.get(k)));
                }
            }
        }
        return result;
    }

}