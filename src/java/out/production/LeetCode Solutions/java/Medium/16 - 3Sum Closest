// first solution

class Solution {

    public int threeSumClosest(int[] nums, int target) {
        int distance = Integer.MAX_VALUE;
        int sum = 0;
        for (int i = 0; i < nums.length - 2; i++) {
            for (int j = i + 1; j < nums.length - 1; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    int test_sum = nums[i] + nums[j] + nums[k];
                    if (Math.abs(test_sum - target) < distance) {
                        distance = Math.abs(test_sum - target);
                        sum = test_sum;
                    }
                }
            }
        }
        return sum;
    }

}

// second solution

class Solution {

    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int min_distance = Integer.MAX_VALUE;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            int target_sum = target - nums[i];
            int left_ptr = i + 1;
            int right_ptr = nums.length - 1;
            while (left_ptr < right_ptr) {
                int test_sum = nums[left_ptr] + nums[right_ptr];
                if (test_sum - target_sum == 0) {
                    return target;
                }
                if (Math.abs(test_sum - target_sum) < min_distance) {
                    min_distance = Math.abs(test_sum - target_sum);
                    sum = test_sum + nums[i];
                }
                if (test_sum - target_sum < 0) {
                    left_ptr++;
                }
                else {
                    right_ptr--;
                }
            }
        }
        return sum;
    }

}