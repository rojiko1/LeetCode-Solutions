// first solution using DFS-like approach going branch by branch

class Solution {

    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        else if ((root.left == null) && (root.right == null)) {
            return 1;
        }
        else if (root.left == null) {
            return 1 + minDepth(root.right);
        }
        else if (root.right == null) {
            return 1 + minDepth(root.left);
        }
        else {
            return 1 + Math.min(minDepth(root.left), minDepth(root.right));
        }
    }

}

// second solution using BFS-like approach going level-by-level

class Solution {

    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int minDepth = 1;
        ArrayDeque<TreeNode> nodesToSearch = new ArrayDeque<TreeNode>();
        nodesToSearch.addLast(root);
        while (nodesToSearch.size() > 0) {
            int numNodesToSearch = nodesToSearch.size();
            for (int i = 0; i < numNodesToSearch; i++) {
                if ((nodesToSearch.peekFirst().left == null) && (nodesToSearch.peekFirst().right == null)) {
                    return minDepth;
                }
                else if (nodesToSearch.peekFirst().left == null) {
                    nodesToSearch.addLast(nodesToSearch.peekFirst().right);
                }
                else if (nodesToSearch.peek().right == null) {
                    nodesToSearch.addLast(nodesToSearch.peekFirst().left);
                }
                else {
                    nodesToSearch.addLast(nodesToSearch.peekFirst().left);
                    nodesToSearch.addLast(nodesToSearch.peekFirst().right);
                }
                nodesToSearch.removeFirst();
            }
            minDepth++;
        }
        return minDepth;
    }

}