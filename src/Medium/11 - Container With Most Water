// first attempt

class Workspace.Solution {

    public int maxArea(int[] height) {
        int maxArea = 0;
        for (int i = 0; i < height.length; i++) {
            for (int j = height.length - 1; j > i; j--) {
                int area = area(i, j, height[i], height[j]);
                if (area > maxArea) {
                    maxArea = area;
                }
            }
        }
        return maxArea;
    }

    private int area(int i, int j, int heightI, int heightJ) {
        return (Math.abs(j - i) * Math.min(heightI, heightJ));
    }

}

// second attempt

class Workspace.Solution {

    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxArea = 0;
        while (left < right) {
            maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));
            if (height[left] < height[right]) {left++;}
            else {right--;}
        }
        return maxArea;
    }

}