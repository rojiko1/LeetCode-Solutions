// first attempt

class Solution(object):

    def twoSum(self, nums, target):
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i, j]

// second attempt

class Solution(object):

    def twoSum(self, nums, target):
        firstNum = 0
        secondNum = 0
        firstIndex = -1
        secondIndex = -1
        firstNotFound = True
        secondNotFound = True
        numbers = copy.deepcopy(nums)
        nums.sort()
        for i in range(len(nums)):
            complement = self.binarySearch(nums, target - nums[i], i + 1, len(nums) - 1)
            if complement != -1:
                firstNum = nums[i]
                secondNum = nums[complement]
                break
        for j in range(len(numbers)):
            if firstNotFound & (numbers[j] == firstNum):
                firstIndex = j
                firstNotFound = False
            elif secondNotFound & (numbers[j] == secondNum):
                secondIndex = j
                secondNotFound = False
            if not (firstNotFound or secondNotFound):
                break
        return [firstIndex, secondIndex]

    def binarySearch(self, nums, target, first, last):
        while first <= last:
            mid = (first + last + 1) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                first = mid + 1
            else:
                last = mid - 1
        return -1

// third attempt

class Solution(object):

    def twoSum(self, nums, target):
        valueRef = {}
        for i in range (len(nums)):
            complement = target - nums[i]
            if complement in valueRef:
                return [i, valueRef[complement]]
            else:
                valueRef[nums[i]] = i
